@page "/"
@using MudBlazor;
@using RefuseManagementPortal.Service;
@using RefuseManagementPortal.Models;
@using System.Net.Http.Json;

<MudGrid Spacing="10">
    <MudItem lg="6">
        <MudCard Class="d-flex align-center justify-center mud-width-full py-8"
                 Elevation="8">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h3">Fleet Status</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudChart ChartType="MudBlazor.ChartType.Donut" ChartOptions="chartColors" InputData="@data" InputLabels="@labels">
                <CustomGraphics>
                    <text class="donut-inner-text" x="50%" y="40%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="3">Available Trucks</text>
                    <text class="donut-inner-text" x="50%" y="54%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@availableTrucks</text>
                </CustomGraphics>
            </MudChart>
        </MudCard>
    </MudItem>

    <MudItem lg="6">
        <MudCard Class="d-flex align-center justify-center mud-width-full py-8 px-5 pe-5"
                 Elevation="8">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h3">Dispatched Trucks</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudGrid Justify="Justify.FlexStart"
                     Spacing="10">
                @if (!(dispatchList is null))
                {
                    @foreach (var record in dispatchList)
                    {
                        <MudItem lg="6">
                            <MudCard Elevation="8"
                                     Style="background-color: #56706f; border: solid; border-color:white; color:white;">
                                <MudCardContent>
                                    <MudText>Truck Number: @record.truckNumber</MudText>
                                    <MudText>Service Area: @record.serviceArea</MudText>
                                    <MudText>Route: @record.route</MudText>
                                    <MudText>Refuse Type: @record.refuseType</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudCard>
    </MudItem>
</MudGrid>

@code {

    // Fields
    private List<DispatchRecord>? dispatchList;
    private List<Truck>? truckList;
    private DataBaseConnection connection = new();
    private double availableTrucks;

    // Properties
    private double[] data = new double[3];
    private string[] labels = { "Available", "Dispatched", "Need Maintenance" };

    MudBlazor.ChartOptions chartColors = new()
        {
            ChartPalette = new string[] { "#009112", "#cc9801", "#e20000" }
        };

    protected override async Task OnInitializedAsync()
    {
        dispatchList = await connection.GetRecordAsync<DispatchRecord>("AllDispatchRecordsFromToday");
        truckList = await connection.GetRecordAsync<Truck>("AllTrucks");
        availableTrucks = Convert.ToDouble(truckList.Count());
        bool readyForCalculation = false;

        do
        {
            if (dispatchList is not null && truckList is not null)
            {
                readyForCalculation = true;
                double dispatchedCount = Convert.ToDouble(dispatchList.Count());
                double trucksNeedService = Convert.ToDouble((truckList.Where(x => x.NeedMaintenance == true)).Count());

                data[1] = dispatchedCount / availableTrucks;
                data[2] = trucksNeedService / availableTrucks;
                data[0] = (availableTrucks - (dispatchedCount + trucksNeedService)) / availableTrucks;
            }
        } while (!readyForCalculation);
    }





}