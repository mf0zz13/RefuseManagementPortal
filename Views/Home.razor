@page "/"
@using MudBlazor;
@using RefuseManagementPortal.Service;
@using RefuseManagementPortal.Models;

<MudGrid Spacing="10">
    <MudItem lg="6">
        <MudCard Class="d-flex align-center justify-center mud-width-full py-8"
                 Elevation="8">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h3">Fleet Status</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudChart ChartType="MudBlazor.ChartType.Donut" ChartOptions="chartColors" InputData="@data" InputLabels="@labels">
                <CustomGraphics>
                    <text class="donut-inner-text" x="50%" y="40%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="3">Available Trucks</text>
                    <text class="donut-inner-text" x="50%" y="54%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@truckCount</text>
                </CustomGraphics>
            </MudChart>
        </MudCard>
    </MudItem>

    <MudItem lg="6">
        <MudCard Class="d-flex align-center justify-center mud-width-full py-8 px-5 pe-5"
                 Elevation="8">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h3">Dispatched Trucks</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudGrid Justify="Justify.FlexStart"
                     Spacing="10">
                @if (!(dispatchList is null))
                {
                    @foreach (var record in dispatchList)
                    {
                        <MudItem lg="6">
                            <MudCard Elevation="8"
                                     Style="background-color: #56706f; border: solid; border-color:white; color:white;">
                                <MudCardContent>
                                    <MudText>Truck Number: @record.TruckNumber</MudText>
                                    <MudText>Service Area: @record.ServiceArea</MudText>
                                    <MudText>Route: @record.Route</MudText>
                                    <MudText>Refuse Type: @record.RefuseType</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudCard>
    </MudItem>

    <MudItem lg="6">
        <MudDataGrid Items="@dateList"
                     Class="py-8 px-5 pe-5"
                     Elevation="8">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Dispatch Records</MudText>
                <MudSpacer />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x" Title="Date" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudButton OnClick="@(() => ViewRecord(context.Item))"
                                       Size="@MudBlazor.Size.Small"
                                       Variant="@Variant.Filled"
                                       Style="background-color: #56706f;
                                              color: white;">
                                View Records
                            </MudButton>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudItem>
</MudGrid>
<MudPopover Open="@Open"
            Paper="true"
            Elevation="8"
            AnchorOrigin="Origin.CenterCenter"
            TransformOrigin="Origin.TopCenter">
    <MudCard Class="d-flex align-center justify-center mud-width-full py-8 px-5 pe-5"
             Elevation="8">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h3">@($"Dispatch Records for {SelectedDate.Month}/{SelectedDate.Day}/{SelectedDate.Year}") </MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudGrid Justify="Justify.FlexStart"
                 Spacing="10">
            @if (!(filteredList is null))
            {
                @foreach (var record in filteredList)
                {
                    <MudItem lg="6">
                        <MudCard Elevation="8"
                                 Style="background-color: #56706f; border: solid; border-color:white; color:white;">
                            <MudCardContent>
                                <MudText>Truck Number: @record.TruckNumber</MudText>
                                <MudText>Service Area: @record.ServiceArea</MudText>
                                <MudText>Route: @record.Route</MudText>
                                <MudText>Refuse Type: @record.RefuseType</MudText>
                                <MudText>Driver: @((employeeList.Where(x => x.EmployeeID == record.Driver).Select(x => $"{x.FirstName} {x.LastName}")).First())</MudText>
                                <MudText>Helper: @((employeeList.Where(x => x.EmployeeID == record.HelperOne).Select(x => $"{x.FirstName} {x.LastName}")).First())</MudText>
                                @if (record.HelperTwo is not null)
                                {
                                    <MudText>Helper: @((employeeList.Where(x => x.EmployeeID == record.HelperTwo).Select(x => $"{x.FirstName} {x.LastName}")).First())</MudText>
                                }
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            }
        </MudGrid>
        <MudButton OnClick="@(() => Open = false)"
                   Size="@MudBlazor.Size.Small"
                   Variant="@Variant.Filled"
                   Style="background-color: #56706f;
                          color: white;"
                   class="mt-3">
            Close
        </MudButton>
    </MudCard>
</MudPopover>

@code {

    // Fields
    private List<DispatchRecord>? dispatchList;
    private List<Truck>? truckList;
    private DataBaseConnection connection = new();
    private double truckCount;
    private List<Employee>? employeeList;
    private List<string>? dateList;
    private List<DispatchRecord>? filteredList;

    // Properties
    private double[] data = new double[3];
    private string[] labels = { "Available", "Dispatched", "Need Maintenance" };
    private bool Open { get; set; }
    private DateTime SelectedDate { get; set; }

    MudBlazor.ChartOptions chartColors = new()
        {
            ChartPalette = new string[] { "#009112", "#cc9801", "#e20000" }
        };

    protected override async Task OnInitializedAsync()
    {
        Open = false;
        dispatchList = (await connection.GetRecordAsync<DispatchRecord>("AllDispatchRecords")).Where(x => x.DispatchDate.Date == DateTime.Today).ToList();
        truckList = await connection.GetRecordAsync<Truck>("AllTrucks");
        dateList = (await connection.GetRecordAsync<DispatchRecord>("AllDispatchRecords")).Select(x => $"{x.DispatchDate.Month}/{x.DispatchDate.Day}/{x.DispatchDate.Year}").Distinct().ToList();
        employeeList = await connection.GetRecordAsync<Employee>("AllEmployees");
        truckCount = Convert.ToDouble(truckList.Count());


        double dispatchedCount = Convert.ToDouble(dispatchList.Count());
        double trucksNeedService = Convert.ToDouble(truckList.Count(x => x.NeedMaintenance == true));

        data[1] = dispatchedCount / truckCount;
        data[2] = trucksNeedService / truckCount;
        data[0] = (truckCount - (dispatchedCount + trucksNeedService)) / truckCount;
    }
    private async Task ViewRecord(string Date)
    {
        Open = true;

        SelectedDate = DateTime.Parse(Date);

        filteredList = (await connection.GetRecordAsync<DispatchRecord>("AllDispatchRecords")).Where(x => x.DispatchDate == SelectedDate).ToList();
    }





}